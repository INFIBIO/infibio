% This script is developed to have all the code developed for cluster
% analysis under the same language (Matlab) so it's easier to adapt all
% changes more straightforward. The main functions in this analysis will
% merge the .mat files generated in the binarization for each experiment.
% It will generate plots for Normalized Area Distribution (NAD), NAD for areas > 2,
% Probability of different size of clusters. Also it will aply different
% statistics to determine differences in Area Distribution per time with
% the Kruskal-Wallis test and the post-hoc Wilcoxon.
% INPUT: folder with the .mat files of a given experiment generated by the
% image_script_analysis.m.
% OUTPUT: A plot folder with the plots generated. A results folder with the
% test and table files in .csv
% Raya-Marin, Alvaro. 25.04.2024.
% Modified by Font-Verdera, Xisca. 07.06.2024.

% Specify the folder of interest with the .mat files. If you're to compare
% more than one experiment at time, specify each folder separately.

% Especifica la carpeta madre que contiene todas las subcarpetas
parentFolder = 'C:\Users\uib\Desktop\Yeast_Experiments\Clustering\data\increasing_velocity_zymo_18102024\taken_when_sampling';

% Obtén una lista de todas las subcarpetas en la carpeta madre
subFolders = dir(parentFolder);
subFolders = subFolders([subFolders.isdir]); % Filtra solo las carpetas
subFolders = subFolders(~ismember({subFolders.name}, {'.', '..'})); % Elimina '.' y '..'
pathOne = fullfile(subFolders(1).folder,subFolders(1).name);
% Initialize an array to store combined results
mat_combined = [];

% Define the mapping of old concentrations to new concentrations
old_conc = [200, 500, 1000, 2000, 5000];
new_conc = [1.25e5, 5e4, 2.5e4, 1.25e4, 5e3];

% Loop through each subfolder
for i = 1:length(subFolders)
    % Get the name of the subfolder
    subFolderName = subFolders(i).name;
    
    % Split the subfolder name into parts using the underscore ('_') character
    parts = split(subFolderName, '_');
    
    % Assign variables from the subfolder name
    Concentration = str2double(parts{1});
    Zymolyase = str2double(parts{2}) / 100;
    Velocity = str2double(parts{3});
    Temperature = str2double(parts{4});
    
    % Map the old concentrations to the new ones
    if ismember(Concentration, old_conc)
        Concentration = new_conc(old_conc == Concentration);
    end
    
    % Specify the full path to the subfolder
    folderPath = fullfile(parentFolder, subFolderName);
    
    % Call the combineMatFiles function for the current subfolder
    combinedResult = combineMatFiles(folderPath, Concentration, Zymolyase, Velocity, Temperature);
    
    % Check if combinedResult has data before processing
    if isempty(combinedResult)
        continue; % Skip to next iteration if no data
    end
    
    % Define a time mapping table for Velocity 125
    timeMapping_125 = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14; 
                        -5, 0, 20, 40, 60, 80, 100, 120, 140, 180, 220, 260, 300, 340, 380, 420];

    % Define a time mapping table for the rest of the velocities
    timeMapping_other = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14;
                        -5, 0, 30, 60, 90, 120, 180, 240, 300, 360, 420, 480, 540, 600, 660, 720];

    % Choose the appropriate time mapping based on Velocity
    if Velocity == 125
        timeMapping = timeMapping_125;
    else
        timeMapping = timeMapping_other;
    end

    % Access the time column in the table (assuming the column is named 'Time')
    time = combinedResult.Time;  % Replace 'Time' with the actual name of the time column if different

    % Iterate over the mapping table and adjust the time values accordingly
    for j = 1:size(timeMapping, 2)
        time(time == timeMapping(1,j)) = timeMapping(2,j);
    end

    % Update the time column in the combined result with the new mapped time values
    combinedResult.Time = time;  % Replace 'Time' with the actual column name
    % combinedResult.Time = combinedResult.Time*20; % Modify to adapt to your time
    % units
    % Add the combined data to the final array
    mat_combined = [mat_combined; combinedResult];
end

% Clean up weird cell shapes. An SVM model with > 99% of accuracy
% distinguishes between weird shapes produced in the binarization and good
% shaped cells to delete weird shaped cell's rows.
mat_cleaned = clean_weird_shapes(mat_combined);
mat_cleaned = mat_combined; % to not apply the cleaning.
writetable(mat_cleaned, fullfile(pathOne, 'mat_cleaned.csv'));

% Plots function will generate the plots specified in the function. 
% INPUT: mat_combined file, number of bins and the path to save the plots.
%pathOne = 'C:\Users\xisca\Desktop\Trials_scripts_XF\trial_clustering_v5_CombinationExperiments';
%mat_cleaned = readtable(fullfile('F:\EXPERIMENTS_CLASSIFIED\Clustering_Cells_Evaluation_Aggregation\COMPARISONS_ALL_EXP\HOMOGENIZER', 'mat_cleaned.csv')); % Check that Velocity is in the file mat_cleaned.csv
plots(mat_cleaned, pathOne);
plots_v2_ar(mat_cleaned, pathOne);
plots_v3_ar(mat_cleaned, pathOne);

% Tests function will apply the test specified in the function. 
% INPUT: mat_combined file and path to store the results.
tests(mat_combined, pathOne);

%%
% Count the raw single cells in images
% Call the function with the specified conditions
% Llamar a la función count_single_cells para cada área única de 1 a 7
% Crear un cell array para almacenar cada countsTable
countsTables = cell(1, 7); % Inicializa un cell array de longitud 7
% Get the full range of possible time points
allTimes = unique(mat_cleaned.Time);
for i = 1:7
    % Generar conteos y guardar en archivo CSV para cada valor de área i
    countsTables{i} = count_single_cells_ar(mat_cleaned, i, pathOne);
    
    % Leer el archivo CSV correspondiente a cada área
    csvFilePath = fullfile(pathOne, 'results', ['countsTable_', num2str(i), '.csv']);
    csvTable = readtable(csvFilePath);
    
    % Llamar a la función de ploteo con los datos cargados
    plot_counts_vs_time_v2(csvTable, i, pathOne); % datos ordenados, reduciendo la leyenda (media, desviación...)
end



% Plot the probabilities in a smarter way
plots_x(mat_cleaned, pathOne); % To obtain the plots individually (per experiment), not changed for all experiments (too many data)

% Probability of a Single Cell Being in a Cluster of X cells
plots_6(mat_cleaned, pathOne); % To obtain the plots individually (per experiment), not changed for all experiments (too many data)

