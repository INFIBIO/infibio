% This script is developed to have all the code developed for cluster
% analysis under the same language (Matlab) so it's easier to adapt all
% changes more straightforward. The main functions in this analysis will
% merge the .mat files generated in the binarization for each experiment.
% It will generate plots for Normalized Area Distribution (NAD), NAD for areas > 2,
% Probability of different size of clusters. Also it will aply different
% statistics to determine differences in Area Distribution per time with
% the Kruskal-Wallis test and the post-hoc Wilcoxon.
% INPUT: folder with the .mat files of a given experiment generated by the
% image_script_analysis.m. 
% OUTPUT: A plot folder with the plots generated. A test folder with the
% test files in .csv
% Raya-Marin, Alvaro. 25.04.2024.
% Modified by Font-Verdera, Xisca. 11.07.2024.
% Modified by Raya-Marin, Alvaro. 14.08.2024

% Obtaining of features, masks and all .mat files.
%script_image_analysis_AR_V2.m

% Especifica la carpeta madre que contiene todas las subcarpetas
parentFolder = 'C:\Users\uib\Desktop\clustering\Exps_clustering_100rpm_200500_07222024_2';

% Obtén una lista de todas las subcarpetas en la carpeta madre
subFolders = dir(parentFolder);
subFolders = subFolders([subFolders.isdir]); % Filtra solo las carpetas
subFolders = subFolders(~ismember({subFolders.name}, {'.', '..'})); % Elimina '.' y '..'
pathOne = fullfile(subFolders(1).folder,subFolders(1).name);
% Inicializa un arreglo para almacenar los resultados combinados
mat_combined = [];

% Recorre cada subcarpeta
for i = 1:length(subFolders)
    % Obtén el nombre de la subcarpeta
    subFolderName = subFolders(i).name;
    
    % Divide el nombre de la subcarpeta en partes usando el carácter de subrayado ('_')
    parts = split(subFolderName, '_');
    
    % Asigna las variables a partir del nombre de la subcarpeta
    Concentration = str2double(parts{1});
    Zymolyase = str2double(parts{2});
    Velocity = str2double(parts{3});
    Temperature = str2double(parts{4});
    
    % Especifica la ruta completa de la subcarpeta
    folderPath = fullfile(parentFolder, subFolderName);
    
    % Llama a la función combineMatFiles para la subcarpeta actual
    combinedResult = combineMatFiles(folderPath, Concentration, Zymolyase, Velocity, Temperature);
    
    % Agrega los datos combinados al arreglo final
    mat_combined = [mat_combined; combinedResult];
end


% The combineMatFiles is the function that will combine all .mat files with 
% the results. It has four inputs, the path to the folder and the name of the
% experiment path: zymolyase concentration (mg/mL), shaking rpm and temperature. 
% % The output is a struct with all the data combined.
% 
% mat_combinedOne = combineMatFiles(pathOne, 200, 0, 100, 30);
% mat_combinedTwo = combineMatFiles(pathTwo, 500, 0, 100, 30);
% 
% % Combine tables: add inside the square brackets each mat file to combine
% mat_combined = [mat_combinedOne; mat_combinedTwo];
% % To save the mat_combined file.
writetable(mat_combined, 'mat_combined.csv');

% Clean up weird cell shapes. An SVM model with > 99% of accuracy
% distinguishes between weird shapes produdced in the binarization and good
% shaped cells to delete weird shaped cell's rows.
mat_cleaned = clean_weird_shapes(mat_combined);
% To save the mat_cleaned file.
writetable(mat_cleaned, 'mat_cleaned.csv');

% Plots function will generate the plots specified in the function. 
% INPUT: mat_cleaned file and the path to save the plots.
%plots(mat_cleaned, pathOne);

% Tests function will apply the test specified in the function. 
% INPUT: mat_cleaned file and path to store the results.
%tests(mat_cleaned, pathOne);

%% --------------------------------------------------------------------------------------------------------- XF

% Count the number of clusters (according to the number of cells) in raw images.
% INPUT: mat_cleaned file, number of cells in a cluster and path to store the results.
countsTable1 = count_single_cells(mat_cleaned, 1, pathOne);
countsTable2 = count_single_cells(mat_cleaned, 2, pathOne);
countsTable3 = count_single_cells(mat_cleaned, 3, pathOne);

% Plot cells per time and replicate
% Necessary to read the previous saved table, due to file compatibility issues.
csvTable1= readtable(fullfile(pathOne, 'results', 'countsTable_1.csv'));
csvTable2= readtable(fullfile(pathOne, 'results', 'countsTable_2.csv'));
csvTable3= readtable(fullfile(pathOne, 'results', 'countsTable_3.csv'));
% INPUT: csvTable, number of cells in a cluster and path to store the results.
plot_counts_vs_time(csvTable1, 1, pathOne);
plot_counts_vs_time(csvTable2, 2, pathOne);
plot_counts_vs_time(csvTable3, 3, pathOne);

% Plot the previous calculated probabilities in a smarter way.
% INPUT: mat_cleaned file and the path to save the plots.
plots_x(mat_cleaned, pathOne);
% Probability of a Single Cell Being in a Cluster of X cells
% INPUT: mat_cleaned file and the path to save the plots.
plots_6(mat_cleaned, pathOne);

% Calculate the significant parameters to "calculate/approach" the cells shape.
% INPUT: mat_cleaned file and the path to save the results.
sig_parameters(mat_cleaned, pathOne);
% Calculation of broken ascus (approach -> Segmentation AR).
% INPUT: mat_cleaned file and the path to save the plots.
broken_ascus(mat_cleaned, pathOne);
